// <auto-generated />
using Intuitive.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Intuitive.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("Intuitive.Models.Airport", b =>
                {
                    b.Property<int>("AirportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GeographyLevel1Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IataCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("AirportId");

                    b.HasIndex("GeographyLevel1Id");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("Intuitive.Models.AirportGroupAssignment", b =>
                {
                    b.Property<int>("AirportGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AirportGroupID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AirportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AirportGroupId");

                    b.HasIndex("AirportGroupID");

                    b.HasIndex("AirportId");

                    b.ToTable("AirportGroupAssignment");
                });

            modelBuilder.Entity("Intuitive.Models.AirportGroups", b =>
                {
                    b.Property<int>("AirportGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("AirportGroupID");

                    b.ToTable("AirportGroups");
                });

            modelBuilder.Entity("Intuitive.Models.GeographyLevel1", b =>
                {
                    b.Property<int>("GeographyLevel1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("GeographyLevel1Id");

                    b.ToTable("GeographyLevel1");
                });

            modelBuilder.Entity("Intuitive.Models.RouteAirports", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArrivalAirportId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartureAirportId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RouteId");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("Intuitive.Models.Airport", b =>
                {
                    b.HasOne("Intuitive.Models.GeographyLevel1", "GeographyLevels")
                        .WithMany("Airports")
                        .HasForeignKey("GeographyLevel1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Aiport_GeographyLevel");

                    b.Navigation("GeographyLevels");
                });

            modelBuilder.Entity("Intuitive.Models.AirportGroupAssignment", b =>
                {
                    b.HasOne("Intuitive.Models.AirportGroups", "AirportGroup")
                        .WithMany("AirportGroupAssignments")
                        .HasForeignKey("AirportGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Intuitive.Models.Airport", "Airport")
                        .WithMany("AirportGroupAssignments")
                        .HasForeignKey("AirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airport");

                    b.Navigation("AirportGroup");
                });

            modelBuilder.Entity("Intuitive.Models.Airport", b =>
                {
                    b.Navigation("AirportGroupAssignments");
                });

            modelBuilder.Entity("Intuitive.Models.AirportGroups", b =>
                {
                    b.Navigation("AirportGroupAssignments");
                });

            modelBuilder.Entity("Intuitive.Models.GeographyLevel1", b =>
                {
                    b.Navigation("Airports");
                });
#pragma warning restore 612, 618
        }
    }
}
